import pip

pip.main(['install', 'python-telegram-bot'])
import logging
from background import keep_alive
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo
from telegram.ext import filters, ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler

TG_TOKEN = "6192367753:AAHwWNyKUcL6tS18Xvr8a72wEWpgyTNsysI"
strategy = "üéÆ –¢–∞–∫—Ç–∏–∫–∞"
scores = "–û—á–∫–∏"
cups = "üèÜ –ò–Ω—Ñ–æ –ø–æ –∫—É–±–∫–∞–º"
tournament = "üèÜ –¢—É—Ä–Ω–∏—Ä"
evolution = "‚¨Ü –≠–≤–æ–ª—é—Ü–∏—è"
usual_day = "‚õÖ –¢–∏–ø–∏—á–Ω—ã–π –¥–µ–Ω—å"
wind = "üåÄ –í–µ—Ç–µ—Ä –ø–µ—Ä–µ–º–µ–Ω"
starfall = "üå† –ó–≤–µ–∑–¥–æ–ø–∞–¥"
chaosstorm = "üå©Ô∏è –®—Ç–æ—Ä–º —Ö–∞–æ—Å–∞"
surprise = "üéá –°—é—Ä–ø—Ä–∏–∑"
corners = "üéØ –£–≥–ª—ã"
slimes = "üëæ –ê—Ç–∞–∫–∞ —Å–ª–∏–∑–Ω–µ–π"
curse = "üíÄ –ü—Ä–æ–∫–ª—è—Ç—å–µ"
brownian_motion = "üîÑ –ë—Ä–æ—É–º–æ–≤—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
extremum = "üó° –≠–∫—Å—Ç—Ä–µ–º—É–º"
drying = "ü´ó –ó–∞—Å—É—Ö–∞"
next_b = "‚è© –î–∞–ª–µ–µ"
back_b = "‚è™ –ù–∞–∑–∞–¥"
main_menu = "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
hero_gear = "–ì–µ—Ä–æ–∏ –∏ –ü—Ä–µ–¥–º–µ—Ç—ã"
robbery = "‚öî –ì—Ä–∞–±–µ–∂–∏"
items = "–ü—Ä–µ–¥–º–µ—Ç—ã"
heroes = "–ì–µ—Ä–æ–∏"
heroic_items = "–ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"
daily_fight = "ü§≥ –ë–æ–π –¥–Ω—è"
peshki = "‚ôü –ò–Ω—Ñ–æ –ø–æ –ø–µ—à–∫–∞–º"
usual_p = "–û–±—ã—á–Ω–∞—è"
rare_p = "–†–µ–¥–∫–∞—è"
epic_p = "–≠–ø–∏—á–µ—Å–∫–∞—è"
leg_p = "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"
bot_page = 1
dragon = "üê≤ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥—Ä–∞–∫–æ–Ω–æ–≤"
d1 = "‚ò†Ô∏è –ñ–∏–∑–Ω–µ–∫—Ä–∞–¥ ‚ò†Ô∏è"
d2 = "‚ö°Ô∏è –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–µ—Ü ‚ö°Ô∏è"
d3 = "üî• –ü–ª–∞–º–µ–Ω–æ—Å–µ—Ü üî•"
d4 = "üòà –î—É—à–µ–ª–æ–≤ üòà"
mark = "–ü–µ—á–∞—Ç—å"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_page
    bot_page = 1
    keyboard_main = [
        [KeyboardButton(tournament), KeyboardButton(dragon)],
        [KeyboardButton(hero_gear), KeyboardButton(peshki)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)


async def handle_tournament_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    keyboard_tournament = [
        [KeyboardButton(strategy), KeyboardButton(robbery)],
        [KeyboardButton(daily_fight), KeyboardButton(cups)],
        [KeyboardButton(scores), KeyboardButton(main_menu)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard_tournament, resize_keyboard=True)
    if text == tournament:
        await context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                       reply_markup=reply_markup)
    elif text == scores:
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text}.jpg', 'rb'))
        ])
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text} 1.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 2.jpg', 'rb'))
        ], caption="–î–µ–Ω—å 1")
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text} 3.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 4.jpg', 'rb'))
        ], caption="–î–µ–Ω—å 2")
    else:
        caption = get_caption(text)
        await context.bot.send_message(chat_id=update.message.chat_id, text=caption)


async def handle_daily_fight_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    global bot_page
    if text == next_b:
        bot_page = bot_page + 1
    elif text == back_b:
        bot_page = bot_page - 1

    if bot_page == 1:
        keyboard_daily_fight = [
            [KeyboardButton(tournament), KeyboardButton(main_menu)],
            [KeyboardButton(evolution), KeyboardButton(usual_day)],
            [KeyboardButton(wind), KeyboardButton(starfall)],
            [KeyboardButton(next_b)]
        ]
    elif bot_page == 2:
        keyboard_daily_fight = [
            [KeyboardButton(tournament), KeyboardButton(main_menu)],
            [KeyboardButton(chaosstorm), KeyboardButton(surprise)],
            [KeyboardButton(corners), KeyboardButton(slimes)],
            [KeyboardButton(back_b), KeyboardButton(next_b)]
        ]
    elif bot_page == 3:
        keyboard_daily_fight = [
            [KeyboardButton(tournament), KeyboardButton(main_menu)],
            [KeyboardButton(curse), KeyboardButton(brownian_motion)],
            [KeyboardButton(extremum), KeyboardButton(drying)],
            [KeyboardButton(back_b)]
        ]

    reply_markup = ReplyKeyboardMarkup(keyboard_daily_fight, resize_keyboard=True)

    if text == daily_fight:
        f = open(rf'texts/{text}.txt', 'r', encoding='utf-8')
        caption = f.read()
        f.close()

        await context.bot.send_message(chat_id=update.message.chat_id, text=caption)
        await context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ë–æ–π –¥–Ω—è:",
                                       reply_markup=reply_markup)
    elif text == back_b or text == next_b:
        await context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ë–æ–π –¥–Ω—è:",
                                       reply_markup=reply_markup)
    else:
        caption = get_caption(text)
        if text != strategy:
            await context.bot.sendMediaGroup(chat_id=update.message.chat_id, caption=caption, media=[
                InputMediaPhoto(media=open(rf'images/{text}.jpg', 'rb'))])
        else:
            await context.bot.send_message(chat_id=update.message.chat_id, text=caption)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —É—Ä–æ–≤–Ω—è –®–º–æ—Ç –≥–µ—Ä–æ—è
async def hero_gear_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    keyboard_gear = [
        [KeyboardButton(heroes), KeyboardButton(items)],
        [KeyboardButton(heroic_items), KeyboardButton(main_menu)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard_gear, resize_keyboard=True)
    if text == hero_gear:
        await context.bot.send_message(chat_id=update.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                                       reply_markup=reply_markup)
    elif text == heroes:
      await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
          InputMediaPhoto(media=open(rf'images/{text}.jpg', 'rb')),])
      await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text} 1.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 2.jpg', 'rb'))
        ])
    elif text == heroic_items:
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text}.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 1.jpg', 'rb'))
        ])
    elif text == items:
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text}.jpg', 'rb'))])
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'images/{text} 1.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 2.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 3.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 4.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'images/{text} 5.jpg', 'rb'))
        ])


async def peshki_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton(usual_p), KeyboardButton(rare_p)],
        [KeyboardButton(epic_p), KeyboardButton(leg_p)],
        [KeyboardButton(main_menu)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    text = update.message.text
    await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[    
      InputMediaPhoto(media=open(rf'images/{text}.jpg', 'rb'))
    ])
    await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
        InputMediaPhoto(media=open(rf'images/{text} 1.jpg', 'rb')),
        InputMediaPhoto(media=open(rf'images/{text} 2.jpg', 'rb')),
        InputMediaPhoto(media=open(rf'images/{text} 3.jpg', 'rb')),
        InputMediaPhoto(media=open(rf'images/{text} 4.jpg', 'rb')),
        InputMediaPhoto(media=open(rf'images/{text} 5.jpg', 'rb'))
    ])
    if text == peshki:
        caption = get_caption(text)
        await context.bot.send_message(chat_id=update.message.chat_id, text=caption, reply_markup=reply_markup)
    else:
        await context.bot.send_photo(chat_id=update.message.chat_id, photo=open(rf'images/{text}.jpg', 'rb'),
                                     reply_markup=reply_markup)


async def dragon_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton(d1), KeyboardButton(d2)],
        [KeyboardButton(d3), KeyboardButton(d4)],
        [KeyboardButton(mark), KeyboardButton(main_menu)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    text = update.message.text
    if text == dragon:
        caption = "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä–∞–∫–æ–Ω–∞:"
        await context.bot.send_message(chat_id=update.message.chat_id, text=caption, reply_markup=reply_markup)
    elif text == mark:
        caption = get_caption(text)
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'dragons/{text}.jpg', 'rb')),
            InputMediaVideo(media=open(rf'dragons/{text} 1.mp4', 'rb')),
            InputMediaVideo(media=open(rf'dragons/{text} 2.mp4', 'rb'))
        ])
        await context.bot.send_message(chat_id=update.message.chat_id, text=caption, parse_mode='Markdown')
    else:
        caption = get_caption(text)
        await context.bot.sendMediaGroup(chat_id=update.message.chat_id, media=[
            InputMediaPhoto(media=open(rf'dragons/{text} 1.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'dragons/{text} 2.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'dragons/{text} 3.jpg', 'rb')),
            InputMediaPhoto(media=open(rf'dragons/{text} 4.jpg', 'rb'))
        ])
        await context.bot.send_message(chat_id=update.message.chat_id, text=caption, parse_mode='html')


def get_caption(text):
    f = open(rf'texts/{text}.txt', 'r', encoding='utf-8')
    caption = f.read()
    f.close()
    return caption


if __name__ == '__main__':
    application = ApplicationBuilder().token(TG_TOKEN).build()

    start_handler = CommandHandler('start', start)
    daily_fight_handler = MessageHandler(filters.Regex(f'^({daily_fight}|{evolution}|{usual_day}|{wind}|'
                                                      f'{starfall}|{chaosstorm}|{surprise}|{corners}|'
                                                      f'{slimes}|{curse}|{brownian_motion}|{extremum}|'
                                                      f'{drying}|{next_b}|{back_b})$'), handle_daily_fight_button)
    tournament_handler = MessageHandler(filters.Regex(f'^({tournament}|{strategy}|{robbery}|{cups}|{scores})$'),
                                        handle_tournament_button)
    main_menu_handler = MessageHandler(filters.Regex(f'^({main_menu})$'), start)
    hero_gear_handler = MessageHandler(filters.Regex(f'^({heroes}|{heroic_items}|{items}|{hero_gear})$'), hero_gear_button)
    peshki_handler = MessageHandler(filters.Regex(f'^({peshki}|{usual_p}|{rare_p}|{epic_p}|{leg_p})$'), peshki_button)
    dragon_handler = MessageHandler(filters.Regex(f'^({dragon}|{d1}|{d2}|{d3}|{d4}|{mark})$'), dragon_button)

    application.add_handler(start_handler)
    application.add_handler(daily_fight_handler)
    application.add_handler(tournament_handler)
    application.add_handler(hero_gear_handler)
    application.add_handler(main_menu_handler)
    application.add_handler(peshki_handler)
    application.add_handler(dragon_handler)
    keep_alive()
    application.run_polling()
